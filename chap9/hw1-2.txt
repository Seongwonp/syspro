21113420 박성원 9주차 과제1, 과제2

1. 전면처리, 후면처리 실습

sleep 100 &
백그라운드에서 sleep 100이 실행
sleep 100 &
또 다른 sleep 100이 백그라운드에서 실행
jobs
현재 백그라운드에서 실행 중인 작업 목록을 표시
두 개의 sleep 100 프로세스도 표시해줌
ps -f
실행 중인 모든 프로세스를 상세하게 보여줌 
두 개의 sleep 100 프로세스도 표시해줌
kill %1
백그라운드 작업 번호 1번인 첫 번째 sleep 100 프로세스를 종료
ps -f
kill %1로 첫 번째 sleep 100 프로세스가 종료되고, 두 번째 sleep 100 프로세스만 표시 됨

2. 작업제어 실습

(echo START1; sleep 10; echo DONE1) &
echo START1을 출력한 후 10초 동안 sleep을 실행하고, 그 다음에 echo DONE1을 출력하는 작업을 백그라운드에서 실행함. 
&를 사용하여 백그라운드에서 실행되기 때문에, 이 작업은 터미널을 차단하지 않고 즉시 프롬프트로 돌아감.

(echo START2; sleep 10; echo DONE2) &
두 번째 명령어는 첫 번째 명령어와 동일한 방식으로 작동 echo START2를 출력하고, 10초 동안 sleep을 실행한 뒤 echo DONE2를 출력하는 작업을 백그라운드에서 실행함
이 명령어 또한 백그라운드에서 실행되므로, 터미널은 즉시 프롬프트로 돌아감

kill -KILL 첫 번째 프로세스
kill -KILL 명령어는 첫 번째 프로세스에게 KILL 시그널을 보내어 즉시 종료시킴. 
KILL 시그널은 강제 종료 시그널이므로, 프로세스가 신호를 처리하지 않고 바로 종료. 
이로 인해 첫 번째 sleep 10 프로세스는 종료되며, echo DONE1은 더 이상 실행되지 않음.

kill -STOP 첫 번째 프로세스
kill -STOP 명령어는 첫 번째 프로세스에게 STOP 시그널을 보내어 프로세스를 일시 중지시킴.
이 시그널은 프로세스를 종료시키지 않고 실행을 멈추게 함. 
따라서 첫 번째 프로세스는 중지 상태로 전환되며, sleep 10은 더 이상 실행되지 않고, echo DONE1도 출력되지 않음.

kill -CONT 첫 번째 프로세스
kill -CONT 명령어는 첫 번째 프로세스에게 CONT 시그널을 보내어 중지된 프로세스를 다시 실행.
이 시그널을 통해 sleep 10이 다시 실행되고, 10초 후 echo DONE1이 출력됨.
